// Code generated by go-bindata.
// sources:
// templates/cf_lb.tf
// templates/network.tf
// templates/network_security_group.tf
// templates/output.tf
// templates/resource_group.tf
// templates/storage.tf
// templates/tls.tf
// templates/vars.tf
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xb1\x6e\xf3\x38\x0c\xde\xf3\x14\x82\x71\xab\x9d\xa4\x0d\x8a\x5b\xbc\x1c\x6e\xb8\xf1\x80\x3e\x80\x40\xdb\x72\x2c\x44\x91\x54\x89\x4a\x9b\x2b\xfc\xee\x07\x59\x76\x12\x2b\xb6\x9b\xfc\xd3\xdf\xad\xe1\x47\x8a\xfc\x3e\x92\xe6\x09\x0c\x87\x42\x30\x92\xd8\xb3\x45\x76\xa4\x95\x3a\x02\x97\x09\xf9\x6e\x57\xab\xab\x51\xd7\x5f\xb4\x64\x06\x69\x01\x96\xbd\xed\xa6\xcc\x1a\xac\xfd\x54\xa6\x0a\x36\xc3\xac\x72\xa6\x64\x24\x81\xff\x9c\x61\xe6\x48\xad\x2b\x24\xc3\x84\x24\x65\x9d\x5a\xff\xc0\x8a\x10\x09\x47\x46\xe2\xbf\x9c\x24\x7f\x7c\x9f\xc0\x64\x4c\x9e\x28\xaf\xda\x34\x38\xac\x08\x81\xaa\x32\xcc\x5a\xaa\x0d\xab\xf9\xd7\x15\xbe\xdd\x64\x9b\x6c\xfb\x96\x6d\xd6\x2f\x1b\x8f\x1b\x1e\xa7\x7b\xa3\x9c\xa6\xe1\x95\x2e\xec\x90\xcc\x18\x91\x15\xca\x36\x99\x87\xb5\xde\xfd\xc4\x0d\x3a\x10\x54\x32\xfc\x54\xe6\x10\xfc\x47\xee\x11\x62\xe4\xbf\x5c\xbc\x28\x9e\x2c\x3e\x38\xfc\x58\xbc\xaf\x7d\xf7\x7b\xd6\xae\x5d\x21\x78\x49\xb9\xee\xca\x5f\xa8\x7d\xa9\x01\x44\x91\x72\xed\x13\x14\xaa\x04\xe4\x4a\x2e\x7b\x1a\xb6\xe7\x4a\xb6\xb3\x84\x8c\x1c\x1e\x22\xe6\x52\x05\x1d\x84\x00\x71\xc9\x25\x27\x49\x75\x96\x70\xe4\xe5\x0c\x07\xa0\xb5\xe0\x01\x4c\xf7\x80\xec\x13\xce\x09\x49\x7a\x0a\xe7\x29\xb9\x63\x02\xb4\x4e\x07\xff\x99\xda\x1e\x2f\x69\x8a\xca\x7b\x06\x57\x84\xd8\x83\xeb\x52\xbc\x49\x32\x27\xc9\x3b\x82\xac\xc0\x54\xf4\xfd\x08\x42\x24\x9d\x1d\x39\x33\xb1\x3d\x58\x4a\xd0\x50\x72\x3c\x93\x9c\xbc\xac\x08\x69\x7d\x5c\x6d\x54\xc1\xe2\xc8\xe3\x64\xfe\xf5\x90\xcd\x36\xc4\xd0\x46\xa1\x2a\x95\x88\x30\xff\x20\xea\x1e\x00\xd8\x4c\x04\x59\x0b\xb5\xe7\x32\x40\x1a\x65\x71\x02\xd2\x21\xb2\x50\xfa\x68\x13\xb6\xc1\x8d\x4b\x64\xe6\x04\xd1\xd3\x6f\x9b\xbe\xea\x23\x53\x0e\xc9\xa4\xd1\xc9\x86\x81\xc0\xe6\x4c\xb1\x31\xcc\x36\x4a\x54\x24\x27\xaf\x03\x07\xbd\x9a\xbe\xb1\x4a\x25\x6b\xbe\x77\x26\x88\x12\xd3\x32\x35\x15\xbd\x73\xca\x75\x3a\x72\x0e\x39\x87\xa5\x43\x79\xf5\xc0\x00\xf3\xaa\x5d\x07\xbc\x5d\x5f\xa1\xe1\x97\xac\xdb\x41\xd7\xbe\xe9\xf2\xae\x8d\x92\xc8\x64\x45\xb5\x32\x78\x9b\x6c\x4e\x92\xc1\xe6\x4d\x0d\xa2\xb6\xbd\x3a\x1e\x99\x93\xdd\xee\xf5\xd9\x20\x42\xed\xe3\x18\x13\x41\x7e\xa4\x70\x69\xb2\xca\x3a\x1d\x02\xcd\xd0\x79\xbf\x01\x62\x66\x2f\x88\x4c\x14\x9e\xd1\x0b\x59\x05\x94\x07\x9f\xe1\x65\x87\x2b\x25\xa2\x72\xef\xb2\xe9\x7d\xd2\xde\x27\xf5\x3e\x77\x01\x3d\xbb\xd4\x32\x44\x2e\xf7\x76\xa9\xde\x47\x77\x78\x5a\xb0\xb4\x41\x8b\xfd\xd0\x2a\x75\xe0\xac\xfb\xe8\x57\x14\xea\x9a\xcb\x30\xc1\xc9\xdf\xdc\xfa\x2f\x7f\x75\x23\xca\xc4\x8b\x7f\x6e\x66\xc7\x36\x1a\x5c\xc3\x3e\x1c\xb3\x48\xc7\x93\x94\x93\xed\x10\xa0\x60\x34\xae\x6b\xbc\x1d\x3a\x5a\xac\x15\xdd\x99\xc2\x6b\xbf\x6c\xef\x56\x4b\x4e\x12\x6b\x45\xea\x11\xe1\xd9\x0a\x10\xc6\xed\x10\x1d\x3a\xed\xb0\x57\xc2\x6d\x33\xc6\x0d\xbf\x5e\x75\xee\xe4\x10\xdc\x22\x93\xcc\x2c\xca\xf1\xb4\x2e\x3e\xb4\xb0\xd8\xf7\xe2\x6c\xcf\xd3\xd9\x7e\xfa\xa1\xbb\x47\xa3\x78\xc7\xf5\xd2\x54\x4f\xaa\x1b\xcb\xdc\x83\x23\x81\xe2\x77\x22\x81\x3a\x4e\x87\xd6\x30\xca\xf9\x2e\xa7\xc6\x89\xa5\x6f\xc6\x93\xb4\x9a\x8f\xa1\x17\x7c\x5c\x8a\x67\x3d\x3d\x3b\x7f\x81\xf5\x1f\x77\xff\xdf\x48\xe4\x71\x05\xbf\x26\xe6\xd4\x76\xb8\x3d\xdc\x1e\x5c\x0c\x33\x5b\xe1\xa9\x13\xee\x76\xfc\x5b\x7f\xca\x28\x87\xda\x21\x49\x26\x0f\x18\xaf\xc2\x09\x84\x8b\xc2\x4f\x60\xb3\xe1\xa9\xcb\xa1\xf8\x7f\x00\x00\x00\xff\xff\xa4\x1a\x14\x68\x79\x0c\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 3193, mode: os.FileMode(480), modTime: time.Unix(1515707321, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetworkTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcf\x4a\xc4\x30\x10\xc6\xef\x79\x8a\x61\xf0\xa0\xb0\x5b\x3c\x7a\xf1\x49\x44\x42\x36\x19\xd7\xe0\x36\x29\x93\x3f\x8a\x25\xef\x2e\xa9\xad\xd8\xd8\xe2\xe6\xfc\x9b\x99\xef\xf7\x85\x29\xf8\xc4\x9a\x00\xd5\x67\x62\xe2\x5e\x66\xcb\x31\xa9\x8b\x74\x14\xdf\x3d\xbf\x21\xe0\xc9\x87\x57\x84\x51\x00\x38\xd5\x13\x34\xef\x11\xf0\x66\xcc\x8a\x3b\x72\x59\x5a\x53\x8e\x15\x3f\x66\x87\x02\x40\x19\xc3\x14\x82\x0c\x83\xd2\xf4\xc3\x3f\xcd\x03\xf3\x05\xa9\xad\xe1\x82\xcf\x02\xe0\xe2\xb5\x8a\xd6\xbb\xcd\xfd\x4c\x67\xeb\x5d\xa9\x7b\x97\xd4\xf2\xcc\x3e\x0d\x72\x8a\x35\x71\x8b\xc4\x1a\xe8\x6a\xa4\xae\x52\x05\x45\x11\xe2\xaf\x74\x48\x27\x47\xf1\x5f\xd7\x1d\xd9\xb0\x92\x1d\x98\x5e\xec\xc7\xef\x81\x2a\xf8\x7d\xe1\xb6\xf5\x3e\xc0\xc3\x01\xee\xef\x76\xad\xae\xd6\x02\x68\x3e\x6e\xa3\x95\x86\x68\x6a\xf9\x0a\x00\x00\xff\xff\xdb\x9a\xf5\x1a\x0b\x02\x00\x00")

func templatesNetworkTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkTf,
		"templates/network.tf",
	)
}

func templatesNetworkTf() (*asset, error) {
	bytes, err := templatesNetworkTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network.tf", size: 523, mode: os.FileMode(480), modTime: time.Unix(1512421079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetwork_security_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\xcd\x6e\x9b\x40\x10\x80\xef\x3c\xc5\x68\xd5\x53\x24\x5b\x29\x81\xc8\x97\x1c\x7a\xec\xbd\x77\xb4\xde\x1d\xf0\xaa\x78\x07\xcd\x2e\x4e\xdb\x88\x77\xaf\x16\x6a\x27\x38\x38\xc2\xa8\x55\x85\x05\xe7\x6f\xfe\x76\x3e\x8d\x60\x74\x54\xb3\x42\x10\xf2\x57\xcd\xc8\xfb\xcc\xa2\x7f\x26\xfe\x9e\x39\x54\x35\x1b\xff\x33\x2b\x98\xea\x4a\x80\xd8\x92\xdb\x09\x78\x89\x00\xac\xdc\x23\x9c\x7d\x4f\x20\x3e\xbd\x1c\x24\xaf\xd1\x1e\x32\xa3\x9b\x55\x8b\x47\x00\x25\x29\xe9\x0d\xd9\x41\x98\xb1\x30\x64\x9b\xc0\x1d\x3b\xe9\xea\x65\x6d\x8d\x96\x3b\x36\xd6\x07\xd6\x21\xff\x3a\x50\x8d\x88\x22\x00\x2f\x0b\xd7\x36\x07\x80\xf6\x60\x98\xec\x1e\xad\x7f\xd7\x56\xa8\xd4\x44\x4d\x14\x5d\x31\xb8\xca\xaf\x18\x5b\xe5\xf3\x1e\x9a\xeb\x12\x05\x08\xf7\xd1\xae\x2f\x0e\xef\xba\x95\x57\x6c\x28\x24\x1b\x8e\x89\xef\xef\x23\x00\x6d\x18\xd5\xf9\x13\xbd\xe6\xfd\x6a\xb7\x54\x5b\x1d\xb2\x49\xa5\xd0\xb9\x8b\x1d\x7c\x29\x4b\x7a\xee\xaa\x92\x27\x45\xe5\x05\xee\x9b\xaa\x02\xf5\xe7\x39\x2b\x62\x9f\xb1\xb4\x05\xf6\xa9\xbb\xc0\x68\x74\xde\xd8\x76\x81\xef\xc0\x27\x10\x71\xfc\x26\x91\xd4\x9a\xd1\xb9\xac\x62\xcc\xcd\x8f\x0f\x12\x9d\x83\x47\x66\x48\x81\xde\x03\x8f\x50\x01\x60\x58\xde\x01\xa1\x86\xc1\x5e\xb6\xab\x44\x09\x81\x2b\x59\xa0\xf5\x13\x7c\x79\x13\x3c\x42\x9b\xcf\xf3\xd6\xe6\x71\xf3\xb8\x59\xc4\xe9\x8b\xd3\xad\x93\x78\xaa\x3b\xa7\xf8\x11\xfa\xc4\xf3\xd6\x27\x4e\xd3\x34\x5d\xfc\x39\xf9\xa3\xad\x9b\x60\x4d\x88\x1a\xe1\xca\xc3\xff\x70\xe5\xee\x2f\x99\x92\x3e\x2c\x9a\x9c\x34\x51\x8c\x7a\x57\x6f\x27\xa8\x72\x8c\x1c\xa1\x4b\x32\xef\xd3\xb2\xd9\x24\xc9\xa2\xcc\xab\x32\xf9\x6a\xe7\x7d\xf5\x0f\xcf\xcb\xcc\xff\x64\x92\xe4\x06\x2f\x8c\xca\xa7\xca\x52\x52\x31\xe5\xbc\x74\x81\xb7\xff\xe3\x92\xdc\xbc\x2e\xbf\x03\x00\x00\xff\xff\x77\x27\x82\x78\x45\x11\x00\x00")

func templatesNetwork_security_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetwork_security_groupTf,
		"templates/network_security_group.tf",
	)
}

func templatesNetwork_security_groupTf() (*asset, error) {
	bytes, err := templatesNetwork_security_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network_security_group.tf", size: 4421, mode: os.FileMode(480), modTime: time.Unix(1512163867, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x51\x6f\xdb\x20\x14\x85\xdf\xfd\x2b\x90\xb5\x87\x55\xda\x52\x2d\x92\xf7\x10\x69\xbf\x05\x11\xfb\xd6\x61\xc5\x80\xee\xbd\x38\xed\xaa\xfc\xf7\x09\x13\x67\x26\x35\x4b\x5a\x3f\xc2\x39\xdf\x3d\x1c\xb0\x0b\xec\x03\x8b\x7a\xb4\xc0\xd2\xaa\x01\x6a\xf1\x56\x09\x31\x2a\x13\x40\xfc\x12\xf5\x97\x37\xf5\x27\x20\xe0\x20\x47\x8d\x1c\x94\x91\x16\xf8\xe8\xf0\x79\xb3\x77\x74\xd8\x44\xc7\xa9\xae\x4e\x55\x35\x83\x28\xec\x6f\xa2\x92\xa6\x44\x40\x20\x17\xb0\x05\xd9\xa3\x0b\xfe\xff\xa4\x5c\x5b\xcc\xc4\x0e\x55\x0f\x52\xb5\xad\x0b\xf6\x56\xb8\x5c\x5c\x62\x76\xf0\xa4\x82\x61\x49\xd0\x06\xd4\xfc\x9a\x12\x14\xa9\xe7\xd6\xae\xe4\x25\x38\xbc\x30\xa0\x55\x46\xea\x32\xd1\x87\xbd\xd1\xad\xd4\x67\x88\xf6\x52\x75\x1d\x02\xd1\x55\x4e\x8d\xd0\xb2\xc3\x79\xf7\x8a\x77\x60\xf6\xb4\x7b\x7c\xbc\x87\xbb\xdb\x36\x4d\xd3\x64\x74\x8f\x7a\x54\x0c\xf2\x19\x5e\x97\xe0\xf8\x4d\x61\xd9\x90\x5c\x68\x26\xa4\x1c\x07\xda\x2c\x16\xa5\x87\xe1\x54\x57\x42\x10\x58\xd2\xac\xc7\x18\x8c\x31\x40\x36\x28\xa5\xfa\xf8\x9c\x8b\x4f\x3a\x0f\x96\xe8\xf0\x6e\xd4\x93\x32\x94\xcd\xfa\x1d\x06\xbf\x77\x2f\x32\xa0\xf9\x44\xfb\xbb\xed\x36\xab\x68\xbe\xf9\x56\x77\xf8\x0e\x37\x2a\xdc\x2c\x05\xe9\xee\x8c\x6b\x95\xa1\x49\x7b\xb9\xbe\xf8\x48\xa2\x27\x8e\xfb\x9e\x8c\x60\x47\xa9\xbb\xe9\x3c\xda\x9e\x1f\x4c\x84\xfc\x43\x67\xcb\xb9\xb0\x3f\x26\x59\xdc\x39\x38\xe2\xaf\xd3\xd0\xdc\xf1\x4d\xfc\x78\x98\x5c\x73\x23\x97\x5d\xed\xef\x71\x37\xc9\x7d\x39\xc3\x07\xed\x3f\x1f\x0a\x4f\x79\xf5\xff\x4d\x88\x4c\x93\xdb\x33\x7a\xc1\x7e\x5d\xd8\x9a\xbd\x3f\xde\x32\xf7\xc7\xdc\x3a\xd7\xb7\x2c\xa0\xc0\x58\x69\xba\x50\xc2\x1d\xb0\xb5\xe2\x13\xed\x6f\x00\x00\x00\xff\xff\x2b\xd8\x75\x99\xf7\x05\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 1527, mode: os.FileMode(480), modTime: time.Unix(1515706590, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x8a\xc4\x20\x10\x45\xf7\x9e\xe2\x23\xb3\x9d\xdc\x60\xce\x22\x15\x53\x64\x84\x44\x43\xa9\x59\x4c\xf0\xee\x83\x42\xa7\x3b\x24\xdd\x0d\x5d\x4b\xf9\xf5\xeb\xf9\x84\x63\xc8\x62\x19\x9a\xfe\xb2\xb0\xcc\xe6\xf6\x62\x46\x09\x79\xd1\xd0\x7d\x88\xbf\x1a\x9b\x02\x3c\xcd\x8c\x3a\x3f\xd0\x5f\xdb\x4a\xd2\xb1\x5f\x8d\x1b\xca\x77\xcb\x28\x60\x0a\x96\x92\x0b\xfe\x9e\x10\x1e\x5d\xf0\x45\x2b\x05\x24\x1a\x63\x2b\x02\xd8\xaf\x4e\x82\x9f\xd9\xa7\x53\x5b\x2d\x2a\xaa\x28\x75\x86\x5b\x72\x3f\x39\x6b\xdc\x13\xae\xab\x79\xcf\xfa\x72\x6b\xe7\x07\x8e\x66\xcc\xf1\x6a\x5b\xb8\x76\xd8\xd5\x8b\x5d\x8d\xb7\x9a\xfd\x0f\x86\x86\x41\x38\x46\x43\xd3\xa3\xb7\x98\x28\x39\xfb\x89\xb0\xff\x00\x00\x00\xff\xff\x58\xec\xbb\xb4\xcd\x01\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 461, mode: os.FileMode(480), modTime: time.Unix(1512609663, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStorageTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\xcd\x6a\xc3\x30\x0c\xc7\xef\x7e\x0a\x61\x76\xee\x1b\xec\xbc\xfb\xfa\x00\x46\x71\x44\x66\x70\xa4\x20\x2b\x81\xad\xe4\xdd\x47\xbc\x36\x6d\x0d\xa5\x3d\x2e\xd7\xfc\xf4\xff\xb2\x52\x91\x59\x23\x81\xc7\x9f\x59\x49\xc7\x50\x4c\x14\x07\x0a\x18\xa3\xcc\x6c\x1e\x7c\x27\xe5\xcb\xc3\xc9\x01\x30\x8e\x04\xcd\xf7\x0e\xfe\xed\xb4\xa0\x1e\x4a\x1a\xa7\x4c\x81\x78\x09\xa9\x5f\xbd\x03\xb8\x88\x87\x41\x65\x9e\x42\xbd\xae\xf8\xc5\xeb\x1e\x38\x6c\x46\x87\x8d\x5a\xbd\x73\x00\x59\x22\x5a\x12\x6e\x1d\xaf\x96\x4a\x43\x12\xae\x5e\xe7\xb8\xc1\x12\x69\x0b\x1f\x0d\xb9\x47\xed\x6f\x39\xa5\x29\xa7\x3f\xfd\x60\xdf\x53\x0d\xf6\xf1\x79\xac\xc6\x86\x43\xa9\x7d\x01\x88\x97\xa4\xc2\x23\xb1\x5d\x6d\x6f\x2a\xae\x6e\x75\xee\xf1\x88\x51\xd8\x30\x31\xe9\xd3\x19\x6b\xd0\x8a\x3c\x18\x0e\x5e\x9e\x0e\xa0\x79\xc3\xb3\xc0\xdd\x7d\x83\x34\x02\x7b\xee\xed\x3f\x95\xb2\x4f\x34\x69\x5a\xd0\xc8\xbf\x5e\xbb\x18\x8d\x91\x72\x7e\x52\x7d\xc7\xfe\x75\xfd\x2e\x4b\xb7\x75\xff\x0d\x00\x00\xff\xff\x23\xe4\x2a\x58\x37\x03\x00\x00")

func templatesStorageTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesStorageTf,
		"templates/storage.tf",
	)
}

func templatesStorageTf() (*asset, error) {
	bytes, err := templatesStorageTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/storage.tf", size: 823, mode: os.FileMode(480), modTime: time.Unix(1512163867, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTlsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\xf1\xc9\x09\x5c\x88\xe0\xa2\x0b\xaf\xa0\x07\x08\xad\x04\x5b\x6c\xa9\x24\xb1\x30\x0c\x73\xf7\x79\xa6\x3e\xff\xf6\x56\x70\x74\x97\x9f\xb5\x95\x43\xe5\xab\x1b\x83\xcb\xf4\x2a\x6b\x38\x63\x27\x20\xf7\xcf\xb4\x16\x75\x20\x81\x9f\xaf\x07\x13\x60\x9e\xa5\xb4\x70\x20\xe1\x7a\xb9\xdf\xe8\xa0\x33\x00\x00\xff\xff\x52\x4d\xac\xad\x51\x00\x00\x00")

func templatesTlsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesTlsTf,
		"templates/tls.tf",
	)
}

func templatesTlsTf() (*asset, error) {
	bytes, err := templatesTlsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tls.tf", size: 81, mode: os.FileMode(480), modTime: time.Unix(1512163867, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xd1\x4a\xc5\x30\x0c\x40\xdf\xfb\x15\xa1\xf8\x3c\x9d\x88\x6f\x7e\xcb\xe8\xda\x28\xc1\x2e\x1d\x69\x57\xc1\xb1\x7f\x97\xad\x50\xb5\x94\x7b\xb7\xb7\x9c\x73\xa0\x49\x36\x42\x66\xf6\x08\x1a\x39\x4f\xe4\x34\xec\x87\x52\xbf\x53\xc1\x0f\x0a\xdc\x4e\x23\x2d\xab\xc7\xa9\x9f\xc4\x6d\x8e\x56\x68\x4d\x14\xb8\x83\x13\xb2\xe1\xd4\x01\xd6\x13\xde\x02\x11\xad\x60\x6a\x21\x63\xfa\x0a\xf2\x39\x59\x72\xa2\x61\x57\x00\x0e\xdf\xcd\xe6\x13\xbc\x81\x1e\x9f\x86\xeb\x7f\x1c\x5f\xb5\xfa\x97\x11\x27\x14\x36\xfe\x4e\xf7\xfc\x72\x75\xab\x84\x4c\x0e\x05\xb4\xf9\xde\x04\x65\x29\x45\xb3\xe9\x59\x3e\xec\xd9\xc8\xd0\x80\x43\x2b\x80\xba\x37\x94\xaf\xca\x15\x5c\x5a\xbd\x42\xab\x55\xf0\x57\x2b\x37\xe9\x68\x05\x1c\xe7\xeb\x7f\x02\x00\x00\xff\xff\xf5\xa0\x00\x27\xe3\x01\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 483, mode: os.FileMode(480), modTime: time.Unix(1512163867, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/network.tf": templatesNetworkTf,
	"templates/network_security_group.tf": templatesNetwork_security_groupTf,
	"templates/output.tf": templatesOutputTf,
	"templates/resource_group.tf": templatesResource_groupTf,
	"templates/storage.tf": templatesStorageTf,
	"templates/tls.tf": templatesTlsTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"network.tf": &bintree{templatesNetworkTf, map[string]*bintree{}},
		"network_security_group.tf": &bintree{templatesNetwork_security_groupTf, map[string]*bintree{}},
		"output.tf": &bintree{templatesOutputTf, map[string]*bintree{}},
		"resource_group.tf": &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"storage.tf": &bintree{templatesStorageTf, map[string]*bintree{}},
		"tls.tf": &bintree{templatesTlsTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

